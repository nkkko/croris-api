# -*- coding: utf-8 -*-
"""CRORIS-API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SrBMk11I5sOJ0RgOaWPedj7TJz-yBJHt

# CRORIS Projekti
"""

#imports
#!pip install psycopg2
import psycopg2 as ps
import requests
import pandas as pd
import json
import time
import datetime

"""### Amazon RDS Postgres database"""

#amazon AWS RDS database connection function
def connect_to_db(host_name,db_name,username,password,port):
  try:
    conn = ps.connect(host=host_name,database=db_name,user=username,password=password,port=port)
  except ps.OperationalError as e:
    raise e
  else:
    print('Connected!')
  return conn

#database connection details
host_name = 'database-croris.cryrfcpuzfv8.eu-west-2.rds.amazonaws.com'
db_name = 'postgres'
port = '5432'
username = 'postgres'
password = '3xoA6C2ekQMzAJ'
conn = None
conn = connect_to_db(host_name,db_name,username,password,port)

"""### API call and data processing"""

# build osoba dataframe
df_ustanova = pd.DataFrame(columns=['id','mbu','ustanovaNaziv','aaiDomain','created'])#done
df_osoba = pd.DataFrame(columns=['id','osobaPoirotId','ime','prezime','ustanovaId','created'])#done
df_projekt = pd.DataFrame(columns=['id','projektPoirotId','hrSifraProjekta','tipProjekta_id','acro',
                                   'pocetak','kraj','currencyCode','totalCost','title','summary','financijer_id','created'])#done
df_financijer = pd.DataFrame(columns=['id','financijerPoirotId','entityId','entityNameHr','entityNameEn',
                                      'vrstaIzvoraFinanciranjaId','vrstaIzvoraFinanciranjaName','pozivId','pozivNaziv','created'])#done
# relacijske tablice
df_osoba_projekt = pd.DataFrame(columns=['osoba_id','projekt_id','pocetak','kraj','projektnaUloga','created'])#done
df_projekt_financijer = pd.DataFrame(columns=['projekt_id','financijer_id','created'])#done
df_projekt_tip = pd.DataFrame(columns=['projekt_id','tipProjektaId','tipProjektaNaziv','created'])#done
df_projekt_ustanova = pd.DataFrame(columns=['projekt_id','ustanova_id','amount','currencyCode','klasifikacijaNaziv','pocetak','kraj','created'])#done

#make an API call to CRORIS
def get_projekt(projekt_id):
  api_url = "https://croris.hr/projekti-api/projekt/"+str(projekt_id)
  err = None
  try:
    response = requests.get(api_url, timeout=1).json()
  except requests.RequestException as e:
    raise e
  else:
    try:
      err = response['errorMessage'] #this key is only present if API error occurs due to the wrong string/id sent
    except KeyError:
      print('Success!') #if errorMessage key is not present that is an obvious success
    else:
      print(err)
  return response, err

def populate_dfs(response,df_ustanova,df_osoba,df_projekt,df_financijer,df_osoba_projekt,df_projekt_financijer,df_projekt_tip,df_projekt_ustanova):
  projekt_id = response['id']
  tipProjektaId = response['tipProjekta']['id']
  tipProjektaNaziv = response['tipProjekta']['naziv']
  projektPoirotId = response['projektPoirotId']
  hrSifraProjekta = response['hrSifraProjekta']
  tipProjekta_id = response['tipProjekta']['id']
  try:
    acro = response['acro']
  except:
    acro=""
  pocetak = response['pocetak']
  kraj = response['kraj']
  currencyCode = response['currencyCode']
  totalCost = response['totalCost']
  title = response['title'][0]['naziv']
  try: 
    summary = response['summary'][0]['naziv']
  except:
    summary = ""
  try:
    financijer_id = response['financijerResources']['_embedded']['financijeri'][0]['id']
  except:
    financijer_id = ""
  created = datetime.datetime.now()

  try:
    response['ustanoveResources']
  except:
    print('Nema ustanove!')
  else:
    #iterate over USTANOVA and save as pandas df together with relation with projekt
    for ustanova in response['ustanoveResources']['_embedded']['ustanove']: 
      #ustanova
      ustanova_id = ustanova['id']
      try:
        mbu = ustanova['mbu']
      except:
        mbu = ""
      ustanovaNaziv = ustanova['naziv']
      try:
        aaiDomain = ustanova['aaiDomain']
      except:
        aaiDomain =""

      #projekt ustanova relation
      try:
        amount = ustanova['amount']
      except:
        amount = ""
      try:
        currencyCode = ustanova['currencyCode']
      except:
        currencyCode = ""
      klasifikacijaNaziv = ustanova['klasifikacija']['naziv']
      ustanovaPocetak = ustanova['pocetak']
      ustanovaKraj = ustanova['kraj']
      
      #save each ustanova from projekt
      df_ustanova = df_ustanova.append({
          'id' :ustanova_id,
          'mbu' :mbu,
          'ustanovaNaziv' :ustanovaNaziv,
          'aaiDomain' :aaiDomain,
          'created' :created},
          ignore_index=True
      )
      #save each relation between ustanova and projekt
      df_projekt_ustanova = df_projekt_ustanova.append({
          'projekt_id' :projekt_id,
          'ustanova_id' :ustanova_id,
          'amount' :amount,
          'currencyCode' :currencyCode,
          'klasifikacijaNaziv' :klasifikacijaNaziv,
          'pocetak' :ustanovaPocetak,
          'kraj' :ustanovaKraj,
          'created' :created},
          ignore_index=True
      )

  try:
    response['osobeResources']
  except:
    print('Nema osoba!')
  else:
    #iterate over all OSOBA from projekt and save to pandas dfs
    for osoba in response['osobeResources']['_embedded']['osobe']: 
      try:
        osobaPoirotId = osoba['osobaPoirotId']
      except:
        osobaPoirotId = ""
      persId = osoba['persId']
      ime = osoba['ime']
      prezime = osoba['prezime']
      projektnaUloga = osoba['klasifikacija']['naziv']
      try:
        ustanovaId = osoba['ustanovaId']
      except:
        ustanovaId = ""
      pocetak = osoba['pocetak']
      kraj = osoba['kraj']
      
      #save each osoba from projekt
      df_osoba = df_osoba.append({
          'id' :persId,
          'osobaPoirotId' :osobaPoirotId,
          'ime' :ime,
          'prezime' :prezime,
          'ustanovaId' :ustanovaId,
          'created' :created},
          ignore_index=True
      )
      #save osoba projekt relation
      df_osoba_projekt = df_osoba_projekt.append({
          'osoba_id' :persId,
          'projekt_id' :projekt_id,
          'pocetak' :pocetak,
          'kraj' :kraj,
          'projektnaUloga' :projektnaUloga,
          'created' :created},
          ignore_index=True
      )
  #save PROJEKT details to pandas df
  df_projekt = df_projekt.append({
      'id' :projekt_id,
      'projektPoirotId' :projektPoirotId,
      'hrSifraProjekta' :hrSifraProjekta,
      'tipProjekta_id' :tipProjekta_id,
      'acro' :acro,
      'pocetak' :pocetak,
      'kraj' :kraj,
      'currencyCode' :currencyCode,
      'totalCost' :totalCost,
      'title' :title,
      'summary' :summary,
      'financijer_id' :financijer_id,
      'created' :created},
      ignore_index=True
  )
  #iterate over FINANCIJER and save as pandas df together with relation with projekt
  try:
    response['financijerResources']
  except:
    print('Nema financijera!')
  else:
    for financijer in response['financijerResources']['_embedded']['financijeri']:
      financijer_id = financijer['id']
      financijerPoirotId = financijer['financijerPoirotId']
      entityId = financijer['entityId']
      entityNameHr = financijer['entityNameHr']
      entityNameEn = financijer['entityNameEn']
      vrstaIzvoraFinanciranjaId = financijer['vrstaIzvoraFinanciranjaId']
      vrstaIzvoraFinanciranjaName = financijer['vrstaIzvoraFinanciranjaName']
      try: 
        pozivId = financijer['pozivId'] 
      except: 
        pozivId =""
      try:
        pozivNaziv = financijer['pozivNaziv']
      except:
        pozivNaziv =""

      #save each financijer from projekt
      df_financijer = df_financijer.append({
          'id' :financijer_id,
          'financijerPoirotId' :financijerPoirotId,
          'entityId' :entityId,
          'entityNameHr' :entityNameHr,
          'entityNameEn' :entityNameEn,
          'vrstaIzvoraFinanciranjaId' :vrstaIzvoraFinanciranjaId,
          'vrstaIzvoraFinanciranjaName' :vrstaIzvoraFinanciranjaName,
          'pozivId' :pozivId,
          'pozivNaziv' :pozivNaziv,
          'created' :created},
          ignore_index=True
      )
      #save each financijer from projekt
      df_projekt_financijer = df_projekt_financijer.append({
          'projekt_id' :projekt_id,
          'financijer_id' :financijer_id,
          'created' :created},
          ignore_index=True
      )
  #save each tip projekta
  df_projekt_tip = df_projekt_tip.append({
      'projekt_id' :projekt_id,
      'tipProjektaId' :tipProjektaId,
      'tipProjektaNaziv' :tipProjektaNaziv,
      'created' :created},
      ignore_index=True
  )
  return df_ustanova,df_osoba,df_projekt,df_financijer,df_osoba_projekt,df_projekt_financijer,df_projekt_tip,df_projekt_ustanova

df_projekt['id'].iloc[-1]

# MAIN

err = None
last_record = df_projekt['id'].iloc[-1]

for id in range(last_record,10001):
  # set projekt ID
  projekt_id = id
  print(id)
  # cal function to get the response from Croris API
  response, err = get_projekt(projekt_id)
  time.sleep(1) #give it a second to rest for df to catch up

  # call function populate_dfs() and assign returned dfs to our pandas dfs
  df_ustanova,df_osoba,df_projekt,df_financijer,df_osoba_projekt,df_projekt_financijer,df_projekt_tip,df_projekt_ustanova = populate_dfs(response,df_ustanova,df_osoba,df_projekt,df_financijer,df_osoba_projekt,df_projekt_financijer,df_projekt_tip,df_projekt_ustanova)

  if err != "Ne postoji tra≈æeni resurs.":
    id = 99999
else:
  print("Finally finished!")

# drop duplicates from all pandas dfs
df_ustanova = df_ustanova.drop_duplicates(subset='id', keep='last')
df_osoba = df_osoba.drop_duplicates(subset='id', keep='last')
df_projekt = df_projekt.drop_duplicates(subset='id', keep='last')
df_financijer = df_financijer.drop_duplicates(subset='id', keep='last')
df_osoba_projekt = df_osoba_projekt.drop_duplicates(subset=['osoba_id','projekt_id'], keep='last')
df_projekt_financijer = df_projekt_financijer.drop_duplicates(subset=['projekt_id','financijer_id'],keep='last')
df_projekt_tip = df_projekt_tip.drop_duplicates(subset='projekt_id', keep='last')
df_projekt_ustanova = df_projekt_ustanova.drop_duplicates(subset=['projekt_id','ustanova_id'], keep='last')

df_ustanova.to_csv('CRORIS_df_ustanova.csv')
df_osoba.to_csv('CRORIS_df_osoba.csv')
df_projekt.to_csv('CRORIS_df_projekt.csv')
df_financijer.to_csv('CRORIS_df_financijer.csv')
df_osoba_projekt.to_csv('CRORIS_df_osoba_projekt.csv')
df_projekt_financijer.to_csv('CRORIS_df_projekt_financijer.csv')
df_projekt_tip.to_csv('CRORIS_df_projekt_tip.csv')
df_projekt_ustanova.to_csv('CRORIS_df_projekt_ustanova.csv')

"""```
# ideja za spremanje svih projekata u jedan pandas df iz kojeg dalje rastavljamo na vise df-ova
df_response = pd.DataFrame(columns=['id','response'])
df_response = df_response.append({
    'id' :projekt_id,
    'response' :response},
    ignore_index=True
)
df_response['response'][0]

# sa svakim upitom vrati se osoba, ali i popis svih projekata na kojima je ta osoba, medutim nasa relacijska tablica trazi i parametre poput pocetak i kraj, a ovdje imamo samo url, tj. id
for projekt in response['osobeResources']['_embedded']['osobe'][0]['_links']['projekt']:
  projekt_url = projekt['href']
  drugi_projekt_id = str(projekt_url).split("projekt/")[1]
  print(projekt_url)
  print(drugi_projekt_id)

```
"""